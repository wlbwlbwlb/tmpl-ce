// Code generated by github.com/wlbwlbwlb/tmpl. CAREFUL EDIT.
// ver: 0.1

package {{ .moduleName }}Control

import (
	"strconv"

	"{{ .projectName }}/kvstore"
	"{{ .projectName }}/{{ .moduleName }}/{{ .moduleName }}Model"

	"github.com/gin-gonic/gin"
)

//	g.POST("/add", {{ .moduleName }}Control.HttpAdd{{ .structName }})
//	g.DELETE("/:id", {{ .moduleName }}Control.HttpDelete{{ .structName }})
//	g.PATCH("/:id", {{ .moduleName }}Control.HttpUpdate{{ .structName }})
//	g.GET("/page", {{ .moduleName }}Control.HttpPage{{ .pluralStyle }})
//	g.GET("/:id", {{ .moduleName }}Control.HttpGet{{ .structName }})

func HttpAdd{{ .structName }}(c *gin.Context) {
	var o {{ .moduleName }}Model.{{ .structName }}

	e := c.ShouldBind(&o)
	if e != nil {
		c.JSON(400, gin.H{
			"msg":   "Bad request",
			"debug": e.Error(),
		})
		return
	}

	conn := kvstore.RedisPool.Get()
	defer conn.Close()

	if e = o.DB().Model(&o).Create(&o).Error; e != nil {
		c.JSON(500, gin.H{
			"msg":   "Please try again later",
			"debug": e.Error(),
		})
		return
	}
	o.DeleteFromRedis(conn)

	c.JSON(200, gin.H{
		"code": 0,
		"msg":  "success",
	})
}

func HttpDelete{{ .structName }}(c *gin.Context) {
	id, e := strconv.ParseInt(c.Param("id"), 10, 64)
	if e != nil {
		c.JSON(400, gin.H{
			"msg":   "Bad request",
			"debug": e.Error(),
		})
		return
	}

	conn := kvstore.RedisPool.Get()
	defer conn.Close()

	var o {{ .moduleName }}Model.{{ .structName }}

	if e = o.DB().Model(&o).Where("id=?", id).Delete(&o).Error; e != nil {
		c.JSON(500, gin.H{
			"msg":   "Please try again later",
			"debug": e.Error(),
		})
		return
	}
	o.DeleteFromRedis(conn)

	c.JSON(200, gin.H{
		"code": 0,
		"msg":  "success",
	})
}

func HttpUpdate{{ .structName }}(c *gin.Context) {
	id, e := strconv.ParseInt(c.Param("id"), 10, 64)
	if e != nil {
		c.JSON(400, gin.H{
			"msg":   "Bad request",
			"debug": e.Error(),
		})
		return
	}

	conn := kvstore.RedisPool.Get()
	defer conn.Close()

	var m map[string]interface{}

	if e = c.ShouldBind(&m); e != nil {
		c.JSON(400, gin.H{
			"msg":   "Bad request",
			"debug": e.Error(),
		})
		return
	}

	var o {{ .moduleName }}Model.{{ .structName }}

	if e = o.DB().Model(&o).Where("id=?", id).Updates(m).Error; e != nil {
		c.JSON(500, gin.H{
			"msg":   "Please try again later",
			"debug": e.Error(),
		})
		return
	}
	o.DeleteFromRedis(conn)

	c.JSON(200, gin.H{
		"code": 0,
		"msg":  "success",
	})
}

func HttpPage{{ .pluralStyle }}(c *gin.Context) {
	req := struct {
		Page int `form:"page,default=1" json:"page" binding:"min=1,max=10"` //page=1第一页
		Size int `form:"size,default=10" json:"size" binding:"min=1,max=50"`
	}{}
	if e := c.ShouldBind(&req); e != nil {
		c.JSON(400, gin.H{
			"msg":   "bad request",
			"debug": e.Error(),
		})
		return
	}

	var o {{ .moduleName }}Model.{{ .structName }}

	engine := o.DB().Model(&o).Limit(req.Size).Offset(req.Size * (req.Page - 1))

	var s []{{ .moduleName }}Model.{{ .structName }}

	if e := engine.Find(&s).Error; e != nil {
		c.JSON(500, gin.H{
			"msg":   "Please try again later",
			"debug": e.Error(),
		})
		return
	}

	c.JSON(200, gin.H{
		"code": 0,
		"msg":  "success",
		"data": s,
	})
}

func HttpGet{{ .structName }}(c *gin.Context) {
	id, e := strconv.ParseInt(c.Param("id"), 10, 64)
	if e != nil {
		c.JSON(400, gin.H{
			"msg":   "Bad request",
			"debug": e.Error(),
		})
		return
	}

	var o {{ .moduleName }}Model.{{ .structName }}

	if e = o.DB().Model(&o).Where("id=?", id).Take(&o).Error; e != nil {
		c.JSON(500, gin.H{
			"msg":   "Please try again later",
			"debug": e.Error(),
		})
		return
	}

	c.JSON(200, gin.H{
		"code": 0,
		"msg":  "success",
		"data": o,
	})
}
