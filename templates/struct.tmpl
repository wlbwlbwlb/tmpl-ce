// Code generated by github.com/wlbwlbwlb/tmpl. CAREFUL EDIT.
// ver: 0.1

package {{ .moduleName }}Model

import (
	"encoding/json"
	"errors"
	"time"

	"{{ .projectName }}/db"
	"{{ .projectName }}/util"

	"github.com/gomodule/redigo/redis"
	"gorm.io/gorm"
)

type {{ .structName }} struct {
{{ .fields }}
}

func (p {{ .structName }}) TableName() string {
	return "{{ .tableName }}"
}

func (p {{ .structName }}) DB() *gorm.DB {
	return db.MustGet("{{ .dbName }}")
}

func (p {{ .structName }}) redisKey() string {
	//todo
	return ""
}

func (p {{ .structName }}) arrayRedisKey() string {
	//todo
	return ""
}

func (p {{ .structName }}) redisKeyTTL() int {
	return int(time.Now().Unix()%6+5) * 60
}

func (p *{{ .structName }}) Get(conn redis.Conn, engine *gorm.DB) (e error) {
	e = p.getFromRedis(conn)

	if nil == e {
		return
	}

	// when redis key stores its value 'NULL', will return ErrRecordNotFound and no need to query from db any more
	if e != nil && errors.Is(e, util.ErrRecordNotFound) {
		return
	}

	if e != nil {
		e2 := engine.Take(p).Error

		if e2 != nil && !errors.Is(e2, gorm.ErrRecordNotFound) {
			return e2
		}

		if e2 != nil {
			if p.redisKeyTTL() > 0 {
				conn.Do("SET", p.redisKey(), "NULL", "EX", p.redisKeyTTL(), "NX")
			} else {
				conn.Do("SET", p.redisKey(), "NULL", "NX")
			}
			return util.ErrRecordNotFound
		}

		if errors.Is(e, redis.ErrNil) {
			p.syncToRedis(conn)
			return nil
		}
	}

	return
}

func (p *{{ .structName }}) ArrayGet(conn redis.Conn, engine *gorm.DB) (arr []{{ .structName }}, e error) {
	arr, e = p.arrayGetFromRedis(conn)

	// get from redis success
	if nil == e {
		return
	}

	// get from redis fail, try db
	if e != nil {
		res := engine.Find(&arr)

		if res.Error != nil {
			return arr, res.Error
		}

		if 0 == res.RowsAffected {
			if p.redisKeyTTL() > 0 {
				conn.Do("SET", p.arrayRedisKey(), "NULL", "EX", p.redisKeyTTL(), "NX")
			} else {
				conn.Do("SET", p.arrayRedisKey(), "NULL", "NX")
			}
			return arr, nil
		}

		// try sync to redis
		if errors.Is(e, redis.ErrNil) {
			p.arraySyncToRedis(conn, arr)
			return arr, nil
		}
	}

	return
}

// redis正常，结果也ok
// redis正常，是设置过NULL的
// redis正常，返回没查到
// redis不正常，报未知错误
func (p *{{ .structName }}) getFromRedis(conn redis.Conn) (e error) {
	if 0 == len(p.redisKey()) {
		return errors.New("struct {{ .structName }} has not set redis key yet")
	}

	buf, e := redis.Bytes(conn.Do("GET", p.redisKey()))

	if e != nil {
		return
	}
	if string(buf) == "NULL" {
		return util.ErrRecordNotFound
	}

	e = json.Unmarshal(buf, p)

	return
}

func (p *{{ .structName }}) arrayGetFromRedis(conn redis.Conn) (arr []{{ .structName }}, e error) {
	arr = make([]{{ .structName }}, 0)

	if 0 == len(p.arrayRedisKey()) {
		return arr, errors.New("struct {{ .structName }} has not set redis key yet")
	}

	buf, e := redis.Bytes(conn.Do("GET", p.arrayRedisKey()))

	if e != nil {
		return
	}
	if string(buf) == "NULL" {
		return
	}

	e = json.Unmarshal(buf, &arr)

	return
}

func (p {{ .structName }}) syncToRedis(conn redis.Conn) (e error) {
	if 0 == len(p.redisKey()) {
		return errors.New("struct {{ .structName }} has not set redis key yet")
	}
	buf, e := json.Marshal(p)
	if e != nil {
		return
	}
	if p.redisKeyTTL() > 0 {
		if _, e = conn.Do("SETEX", p.redisKey(), p.redisKeyTTL(), buf); e != nil {
			return
		}
	} else {
		if _, e = conn.Do("SET", p.redisKey(), buf); e != nil {
			return
		}
	}
	return
}

func (p {{ .structName }}) arraySyncToRedis(conn redis.Conn, arr []{{ .structName }}) (e error) {
	if 0 == len(p.arrayRedisKey()) {
		return errors.New("struct {{ .structName }} has not set redis key yet")
	}
	buf, e := json.Marshal(arr)
	if e != nil {
		return
	}
	if p.redisKeyTTL() > 0 {
		if _, e = conn.Do("SETEX", p.arrayRedisKey(), p.redisKeyTTL(), buf); e != nil {
			return
		}
	} else {
		if _, e = conn.Do("SET", p.arrayRedisKey(), buf); e != nil {
			return
		}
	}
	return
}

func (p {{ .structName }}) DeleteFromRedis(conn redis.Conn) (e error) {
	if len(p.redisKey()) > 0 {
		if _, e = conn.Do("DEL", p.redisKey()); e != nil {
			return
		}
	}
	if len(p.arrayRedisKey()) > 0 {
		if _, e = conn.Do("DEL", p.arrayRedisKey()); e != nil {
			return
		}
	}
	return
}

func (p {{ .structName }}) ArrayDeleteFromRedis(conn redis.Conn) error {
	return p.DeleteFromRedis(conn)
}
